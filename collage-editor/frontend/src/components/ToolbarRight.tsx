import { Box, Button, Paper, ToggleButton, ToggleButtonGroup, Typography } from "@mui/material";
import { FormatAlignLeft, FormatAlignCenter, FormatAlignRight, FormatAlignJustify } from "@mui/icons-material";
import { ChangeEvent, useRef, useState, useEffect } from "react";
import { useEditorStore } from "../store/useEditorStore";
import { fabric } from "fabric";
import LayersPanel from "./LayersPanel";

const ToolbarRight = () => {
  const { canvas } = useEditorStore();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [selectedObject, setSelectedObject] = useState<fabric.Object | null>(null);
  const [textAlign, setTextAlign] = useState<"left" | "center" | "right" | "justify">("left");

  // üîπ –°–ª–µ–¥–∏–º –∑–∞ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ö–æ–ª—Å—Ç–µ
  useEffect(() => {
    if (!canvas) return;

    const handleSelection = () => {
      const activeObject = canvas.getActiveObject();
      setSelectedObject(activeObject || null);
    };

    canvas.on("selection:created", handleSelection);
    canvas.on("selection:updated", handleSelection);
    canvas.on("selection:cleared", () => setSelectedObject(null));

    return () => {
      canvas.off("selection:created", handleSelection);
      canvas.off("selection:updated", handleSelection);
      canvas.off("selection:cleared", () => setSelectedObject(null));
    };
  }, [canvas]);

  // üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleReplaceImage = (event: ChangeEvent<HTMLInputElement>) => {
    if (!(selectedObject instanceof fabric.Image) || !canvas) return;
    const file = event.target.files?.[0];

    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (!e.target?.result) return;
        fabric.Image.fromURL(e.target.result as string, (img) => {
          if (!img || !img.width || !img.height) return;

          // üîπ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ
          img.set({
            left: selectedObject.left,
            top: selectedObject.top,
            scaleX: selectedObject.scaleX,
            scaleY: selectedObject.scaleY,
            angle: selectedObject.angle,
          });

          canvas.remove(selectedObject);
          canvas.add(img);
          canvas.setActiveObject(img);
          canvas.renderAll();
          setSelectedObject(img);
        });
      };
      reader.readAsDataURL(file);
    }
  };

  // üîπ –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
  const handleDeleteObject = () => {
    if (selectedObject && canvas) {
      canvas.remove(selectedObject);
      setSelectedObject(null);
      canvas.discardActiveObject();
      canvas.renderAll();
    }
  };

  // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
  useEffect(() => {
    if (selectedObject instanceof fabric.Textbox) {
      setTextAlign(selectedObject.textAlign as "left" | "center" | "right" | "justify");
    }
  }, [selectedObject]);

  // üîπ –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
  const changeTextAlignment = (_: React.MouseEvent<HTMLElement>, alignment: "left" | "center" | "right" | "justify") => {
    if (!alignment || !(selectedObject instanceof fabric.Textbox)) return;

    selectedObject.set("textAlign", alignment);
    setTextAlign(alignment); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    canvas?.renderAll(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
  };

  return (
    <Paper
      sx={{
        width: 200,
        bgcolor: "background.paper",
        p: 2,
        display: "flex",
        flexDirection: "column",
        height: "100vh",
      }}
    >
      {/* üîπ –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å ‚Äî –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è */}
      <Box sx={{ flex: 1, mb: 2 }}>
        {selectedObject ? (
          <Box>
            <Typography variant="subtitle1" gutterBottom>
              üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </Typography>

            {/* –ï—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
            {selectedObject instanceof fabric.Image && (
              <>
                <Button variant="contained" color="primary" onClick={() => fileInputRef.current?.click()} fullWidth>
                  üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                </Button>
                <input type="file" accept="image/*" ref={fileInputRef} style={{ display: "none" }} onChange={handleReplaceImage} />
              </>
            )}

            {/* üî• –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ */}
            {selectedObject instanceof fabric.Textbox && (
              <Box sx={{ mb: 2 }}>
                <ToggleButtonGroup
                  value={textAlign}
                  exclusive
                  onChange={changeTextAlignment}
                  size="small"
                  fullWidth
                >
                  <ToggleButton value="left">
                    <FormatAlignLeft />
                  </ToggleButton>
                  <ToggleButton value="center">
                    <FormatAlignCenter />
                  </ToggleButton>
                  <ToggleButton value="right">
                    <FormatAlignRight />
                  </ToggleButton>
                  <ToggleButton value="justify">
                    <FormatAlignJustify />
                  </ToggleButton>
                </ToggleButtonGroup>
              </Box>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ª—é–±–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ */}
            <Button variant="contained" color="secondary" onClick={handleDeleteObject} fullWidth>
              üóë –£–¥–∞–ª–∏—Ç—å
            </Button>
          </Box>
        ) : (
          <Typography variant="subtitle1" sx={{ textAlign: "center", color: "gray" }}>
            –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç
          </Typography>
        )}
      </Box>

      {/* üîπ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–µ–≤ */}
      <Box sx={{ height: "50%", overflow: "auto" }}>
        <LayersPanel />
      </Box>
    </Paper>
  );
};

export default ToolbarRight;
