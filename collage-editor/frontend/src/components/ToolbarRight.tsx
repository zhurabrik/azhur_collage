import { Box, Button, Paper } from "@mui/material";
import { ChangeEvent, useRef, useState, useEffect } from "react";
import { useEditorStore } from "../store/useEditorStore";
import { fabric } from "fabric";

const ToolbarRight = () => {
  const { canvas } = useEditorStore();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [selectedImage, setSelectedImage] = useState<fabric.Image | null>(null);

  // üîπ –°–ª–µ–¥–∏–º –∑–∞ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ö–æ–ª—Å—Ç–µ
  useEffect(() => {
    if (!canvas) return;

    const handleSelection = () => {
      const activeObject = canvas.getActiveObject();
      if (activeObject instanceof fabric.Image) {
        setSelectedImage(activeObject);
      } else {
        setSelectedImage(null);
      }
    };

    canvas.on("selection:created", handleSelection);
    canvas.on("selection:updated", handleSelection);
    canvas.on("selection:cleared", () => setSelectedImage(null));

    return () => {
      canvas.off("selection:created", handleSelection);
      canvas.off("selection:updated", handleSelection);
      canvas.off("selection:cleared", () => setSelectedImage(null));
    };
  }, [canvas]);

  // üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleReplaceImage = (event: ChangeEvent<HTMLInputElement>) => {
    if (!selectedImage || !canvas) return;
    const file = event.target.files?.[0];

    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (!e.target?.result) return;
        fabric.Image.fromURL(e.target.result as string, (img) => {
          if (!img || !img.width || !img.height) return;

          // üîπ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ
          img.set({
            left: selectedImage.left,
            top: selectedImage.top,
            scaleX: selectedImage.scaleX,
            scaleY: selectedImage.scaleY,
            angle: selectedImage.angle,
          });

          canvas.remove(selectedImage);
          canvas.add(img);
          canvas.setActiveObject(img);
          canvas.renderAll();
          setSelectedImage(img);
        });
      };
      reader.readAsDataURL(file);
    }
  };

  // üîπ –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleDeleteImage = () => {
    if (selectedImage && canvas) {
      canvas.remove(selectedImage);
      setSelectedImage(null);
      canvas.discardActiveObject();
      canvas.renderAll();
    }
  };

  return (
    selectedImage && (
      <Paper elevation={3} sx={{ width: 200, bgcolor: "background.paper", p: 2, display: "flex", flexDirection: "column", gap: 2 }}>
        <Box>üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Box>
        {/* üîπ –ö–Ω–æ–ø–∫–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
        <Button variant="contained" color="primary" onClick={() => fileInputRef.current?.click()}>
          üîÑ –ó–∞–º–µ–Ω–∏—Ç—å
        </Button>
        <input type="file" accept="image/*" ref={fileInputRef} style={{ display: "none" }} onChange={handleReplaceImage} />

        {/* üîπ –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
        <Button variant="contained" color="secondary" onClick={handleDeleteImage}>
          üóë –£–¥–∞–ª–∏—Ç—å
        </Button>
      </Paper>
    )
  );
};

export default ToolbarRight;
