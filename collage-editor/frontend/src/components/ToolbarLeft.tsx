import { IconButton, Button, Paper } from "@mui/material";
import { useEditorStore } from "../store/useEditorStore";
import { ChangeEvent, useRef } from "react";
import { fabric } from "fabric";
import MenuIcon from "@mui/icons-material/Menu";
import { useAppStore } from "../store/useAppStore";

const ToolbarLeft = () => {
  const { canvas } = useEditorStore();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const bgInputRef = useRef<HTMLInputElement>(null);
  const toggleHeader = useAppStore((s) => s.toggleHeader);

  const handleExport = () => {
    if (!canvas) return;
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const zoom = canvas.getZoom();
    const originalWidth = canvas.width!;
    const originalHeight = canvas.height!;
  
    // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 100% –º–∞—Å—à—Ç–∞–± –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    canvas.setZoom(1);
    canvas.setDimensions({
      width: originalWidth,
      height: originalHeight,
    });
  
    canvas.renderAll();
  
    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
    const dataURL = canvas.toDataURL({
      format: "png",
      quality: 1.0,
      multiplier: 1, // ‚úÖ –º–∞—Å—à—Ç–∞–± = 1, —Ç.–µ. –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    });
  
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –º–∞—Å—à—Ç–∞–± –ø–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    canvas.setZoom(zoom);
    canvas.setDimensions({
      width: originalWidth * zoom,
      height: originalHeight * zoom,
    });
  
    canvas.renderAll();
  
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º preview
    const previewWindow = window.open("/preview", "_blank");
    setTimeout(() => {
      if (previewWindow) {
        previewWindow.postMessage({ type: "preview", dataURL }, "*");
      }
    }, 1000);
  };
  

  // üîπ –ó–∞–º–µ–Ω–∞ —Ñ–æ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ö–æ–ª—Å—Ç–∞
  const handleReplaceBackground = (event: ChangeEvent<HTMLInputElement>) => {
    if (!canvas) return;
    const file = event.target.files?.[0];
  
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (!e.target?.result) return;
  
        fabric.Image.fromURL(e.target.result as string, (img) => {
          if (!img || !img.width || !img.height) return;
  
          const canvasWidth = canvas.width!;
          const canvasHeight = canvas.height!;
  
          // üî• –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± —Ç–∞–∫, —á—Ç–æ–±—ã —Ñ–æ–Ω **–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞–ª —Ö–æ–ª—Å—Ç**
          const scaleX = canvasWidth / img.width;
          const scaleY = canvasHeight / img.height;
          const scale = Math.max(scaleX, scaleY); // ‚úÖ –ë–µ—Ä—ë–º **–Ω–∞–∏–±–æ–ª—å—à–∏–π** –º–∞—Å—à—Ç–∞–± –¥–ª—è "cover"
  
          img.set({
            left: canvasWidth / 2,
            top: canvasHeight / 2,
            originX: "center",
            originY: "center",
            scaleX: scale,
            scaleY: scale,
          });
  
          // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω
          canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
        });
      };
      reader.readAsDataURL(file);
    }
  };

  // üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleAddImage = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && canvas) {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (!e.target?.result) return;
  
        // üîπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        const imageName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", file.name.split(".")[0]);
  
        fabric.Image.fromURL(e.target.result as string, (img) => {
          if (!img || !img.width || !img.height) return;
  
          let scale = 1;
          if (img.width > 300) {
            scale = 300 / img.width;
          }
  
          img.set({
            left: canvas.width! / 2,
            top: canvas.height! / 2,
            scaleX: scale,
            scaleY: scale,
            originX: "center",
            originY: "center",
            name: imageName || "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è
          });
  
          canvas.add(img);
          canvas.setActiveObject(img);
          canvas.renderAll();
        });
      };
      reader.readAsDataURL(file);
    }
  };
  

  // üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  const handleAddText = () => {
    if (!canvas) return;

    const text = new fabric.Textbox("–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", {
      left: canvas.width! / 2,
      top: canvas.height! / 2,
      fontSize: 24,
      fill: "#000",
      textAlign: "center",
      originX: "center",
      originY: "center",
    });

    canvas.add(text);
    canvas.setActiveObject(text);
    canvas.renderAll();
  };

  return (
    <Paper elevation={3} sx={{ width: 80, bgcolor: "background.paper", p: 2, display: "flex", flexDirection: "column", gap: 2 }}>
      <IconButton onClick={toggleHeader} sx={{ color: "#fff", mb: 2 }}>
        <MenuIcon />
      </IconButton>
      <Button variant="contained" color="primary">‚Ü©Ô∏è</Button> {/* –û—Ç–º–µ–Ω–∏—Ç—å */}
      <Button variant="contained" color="primary">‚Ü™Ô∏è</Button> {/* –í–µ—Ä–Ω—É—Ç—å */}
      
      {/* üîπ –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞ */}
      <Button variant="contained" color="primary" onClick={() => bgInputRef.current?.click()}>üé®</Button>
      <input type="file" accept="image/*" ref={bgInputRef} style={{ display: "none" }} onChange={handleReplaceBackground} />

      {/* üîπ –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      <Button variant="contained" color="primary" onClick={() => fileInputRef.current?.click()}>üñº</Button>
      <input type="file" accept="image/*" ref={fileInputRef} style={{ display: "none" }} onChange={handleAddImage} />

      <Button variant="contained" color="primary" onClick={handleAddText}>üî§</Button> {/* –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç */}
      <Button variant="contained" color="primary">üíæ</Button> {/* –°–æ—Ö—Ä–∞–Ω–∏—Ç—å */}
      <Button variant="contained" color="primary" onClick={handleExport}>üì§</Button> {/* –≠–∫—Å–ø–æ—Ä—Ç */}
    </Paper>
  );
};

export default ToolbarLeft;
